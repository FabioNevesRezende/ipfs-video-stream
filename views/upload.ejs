<br><br>
<div class="row" id="rowContent">
    <div class="col"></div>
    <div class="col-8">
        <main class="text-center">
            <div class="row">
                <div class="col-md-12">
                    <form action="/uploadCid" method="POST" enctype="multipart/form-data" id="sendVideo">
                    <div class="form-floating">
                        <img class="mb-4" src="/logo.png" alt="no logo" width="72" height="57">
                    </div>
                    <h1 class="h3 mb-3 fw-normal">Upload new video</h1>
                
                    <div class="form-floating">
                        <input type="text" name="fileName" id="fileName" maxlength="25" required  class="form-control" placeholder="Filename">
                        <label for="fileName">Filename</label>
                    </div><br>
                    <div class="form-floating">
                        <div class="form-post-file-input-box">
                            <input type="file" name="file" id="inputfile" required class="form-control">
                        </div>
                    </div>
                    <div class="form-floating">
                        <textarea name="description" id="description" class="form-control" maxlength="1024" style="height: 125px;" required></textarea>
                        <label for="description">Video description</label>
                    </div><br>
                    <div class="form-floating">
                        <input type="text" name="categories" id="categories" maxlength="1024" required class="form-control">
                        <label for="categories">Categories (separated by comma)</label>
                    </div>
                    <input type="hidden" name="_csrf" value="<%= csrfToken %>" /><br>
                    <input type="hidden" name="cid" id="cid" value="" /><br>
                    <input type="hidden" name="duration" id="duration" value="" /><br>
                
                    <button class="w-100 btn btn-lg btn-primary" type="button" id="upload">Upload</button>
                    <!--captcha-->
                    </form>
                </div>
            </div>
        
        </main>
    </div>
    <div class="col"></div>
</div>

<div id="loaderbg" class="text-center" style="display: none;">
    <div id="loader"></div>
    <span id="loadermsg"></span>
</div>
<script  src="/ffmpeg/ffmpeg/dist/ffmpeg.min.js"></script>
<script>
    if( typeof SharedArrayBuffer !== 'undefined' ) {
        console.log("Shared array buffer supported");
        const showLoading = () => {
            console.log("showing loading bar")
            document.getElementById("loaderbg").style.display = "block";
            document.getElementById("loadermsg").innerHTML = "Converting to IPFS stream format, obtaining file metadata";

            $("#upload").prop('disabled', true);
            $("#fileName").prop('disabled', true);
            $("#inputfile").prop('disabled', true);
            $("#description").prop('disabled', true);
            $("#categories").prop('disabled', true);
        }

        const returnPageInitState = () => {
            console.log("return Page Init State")
            document.getElementById("loaderbg").style.display = "none";

            $("#upload").prop('disabled', false);
            $("#fileName").prop('disabled', false);
            $("#inputfile").prop('disabled', false);
            $("#description").prop('disabled', false);
            $("#categories").prop('disabled', false);
        }

        const { createFFmpeg, fetchFile } = FFmpeg;
        const ffmpeg = createFFmpeg({
            corePath: '/ffmpeg/core/dist/ffmpeg-core.js',
            log: true,
        });
        
        ffmpeg.setLogger(({ type, message }) => {
            console.log(type, message);  
            document.getElementById("loadermsg").innerHTML = "Converting to IPFS stream format, " + message;
        });

        const transcode = async (files) => {
            console.log('Running ffmpeg')
            window.URL = window.URL || window.webkitURL;
            const { name } = files[0];

            var video = document.createElement('video');
            video.preload = 'metadata';

            video.onloadedmetadata = async () => {
                try{
                    window.URL.revokeObjectURL(video.src);
                    var duration = video.duration;
                    console.log(`Video duration: ${duration}`);

                    if(window.ipfsNode){
                        console.log("ipfs node already defined in window object")
                        ipfs = window.ipfsNode
                    }
                    else {
                        console.log("ipfs node undefined, creating one")
                        await createNode()
                        ipfs = window.ipfsNode
                    }

                    await ipfs.files.mkdir(`/videos/${name}` , {parents: true});

                    await ffmpeg.load();
                    ffmpeg.FS('writeFile', name, await fetchFile(files[0]));
                    await ffmpeg.run('-i', name, '-hls_time', '10', '-hls_playlist_type', 'vod', '-hls_segment_filename', 'part_%03d.ts', 'master.m3u8');

                    const mContet = ffmpeg.FS('readFile', 'master.m3u8')
                    const data = (new TextDecoder().decode(mContet)).split('\n')
                    console.log('master.m3u8: ')
                    console.log(data)
                    await ipfs.files.write(`/videos/${name}/master.m3u8`, mContet, { create: true })
                    dirStat = await ipfs.files.stat(`/videos/${name}/master.m3u8`)
                    dirCid = dirStat.cid.toString()
                    await ipfs.pin.add(dirCid)
                    for(const d of data){
                        if(d.includes('part_')){
                        const part = ffmpeg.FS('readFile', d);
                        console.log(`${d}: `)
                        console.log(part)

                        console.log(`writing ipfs file: /videos/${name}/${d}`)
                        await ipfs.files.write(`/videos/${name}/${d}`, part, { create: true })
                        dirStat = await ipfs.files.stat(`/videos/${name}/${d}`)
                        dirCid = dirStat.cid.toString()
                        await ipfs.pin.add(dirCid)
                        }
                    }
                    await ffmpeg.run('-i', name, '-ss', "00:00:05", '-frames:v', '1', 'thumb.png' );
                    const filecontent = ffmpeg.FS('readFile', 'thumb.png')
                    await ipfs.files.write(`/videos/${name}/thumb.png`, filecontent, { create: true })
                    dirStat = await ipfs.files.stat(`/videos/${name}/thumb.png`)
                    dirCid = dirStat.cid.toString()
                    await ipfs.pin.add(dirCid)
                    dirStat = await ipfs.files.stat(`/videos/${name}`)
                    dirCid = dirStat.cid.toString()
                    await ipfs.pin.add(dirCid)
                    document.getElementById("inputfile").value = document.getElementById("inputfile").defaultValue
                    console.log(`dir cid: ${dirCid}`)
                    returnPageInitState();
                    document.getElementById("cid").value = dirCid;
                    document.getElementById("duration").value = duration;
                    document.getElementById("sendVideo").submit();
                }catch(err){
                    alert(err)
                    returnPageInitState();
                    
                }

            }

            video.src = URL.createObjectURL(files[0]);;

            return true;

        }
        $('#upload').click(async () => {
            if(!$("#fileName").val()){
                alert("Please fill a file name")
                return false;
            }
            if(!$("#inputfile").val()){
                alert("You must select a video file")
                return false;
            }
            if(!$("#description").val()){
                alert("Please set a description to the Video")
                return false;
            }
            if(!$("#categories").val()){
                alert("You must put at least one category to the video")
                return false;
            }

            files = document.getElementById("inputfile").files
            console.log("file type: ", files[0].type)

            if(files[0].type !== "video/webm" && files[0].type !== "video/mp4"){
                alert("Unsupported file type, try Mp4 or Webm")
                return false;

            }

            showLoading();
            try{
                return await transcode(files)
            }catch(err){
                alert(err)
                returnPageInitState();
            }
            return false;
            // return false to cancel form action
        });


    } else {
        console.log("Browser unsupported")
        let content = "<br>"
        content += "<div class=\"col\"></div>"
        content += "<div class=\"col-8 text-center\">"
        content += "<h2>Browser not supported</h2>"
        content += "<p>Your browser does not support FFmpeg so you can not use it to upload videos. Sorry for the inconvenience!</p>"
        content += "</div>"
        content += "<div class=\"col\"></div>"
        $('#rowContent').html(content);
    }
</script>